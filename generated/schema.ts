// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class FailedPayment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FailedPayment entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FailedPayment entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FailedPayment", id.toString(), this);
  }

  static load(id: string): FailedPayment | null {
    return store.get("FailedPayment", id) as FailedPayment | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _beneficiary(): Bytes {
    let value = this.get("_beneficiary");
    return value.toBytes();
  }

  set _beneficiary(value: Bytes) {
    this.set("_beneficiary", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Payment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Payment entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Payment entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Payment", id.toString(), this);
  }

  static load(id: string): Payment | null {
    return store.get("Payment", id) as Payment | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _beneficiary(): Bytes {
    let value = this.get("_beneficiary");
    return value.toBytes();
  }

  set _beneficiary(value: Bytes) {
    this.set("_beneficiary", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class JackpotPayment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save JackpotPayment entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save JackpotPayment entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("JackpotPayment", id.toString(), this);
  }

  static load(id: string): JackpotPayment | null {
    return store.get("JackpotPayment", id) as JackpotPayment | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _beneficiary(): Bytes {
    let value = this.get("_beneficiary");
    return value.toBytes();
  }

  set _beneficiary(value: Bytes) {
    this.set("_beneficiary", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}
